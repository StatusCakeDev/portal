"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[46],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>m});var n=t(67294);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},l=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?n.createElement(f,a(a({ref:r},l),{},{components:t})):n.createElement(f,a({ref:r},l))}));function m(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=t[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},70812:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=t(87462),i=(t(67294),t(3905));const o={sidebar_position:3},a="Errors",s={unversionedId:"references/api/errors",id:"references/api/errors",title:"Errors",description:"The StatusCake API uses conventional HTTP response codes to indicate the",source:"@site/guides/references/api/errors.md",sourceDirName:"references/api",slug:"/references/api/errors",permalink:"/guides/references/api/errors",draft:!1,editUrl:"https://github.com/StatusCakeDev/portal/tree/master/guides/references/api/errors.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guides",previous:{title:"Ratelimiting",permalink:"/guides/references/api/ratelimiting"},next:{title:"Parameters",permalink:"/guides/references/api/parameters"}},c={},p=[{value:"Handling Errors",id:"handling-errors",level:2},{value:"Next Steps",id:"next-steps",level:2}],l={toc:p};function u(e){let{components:r,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"errors"},"Errors"),(0,i.kt)("p",null,"The StatusCake API uses conventional HTTP response codes to indicate the\nsuccess or failure of an API request. In general: Codes in the ",(0,i.kt)("inlineCode",{parentName:"p"},"2xx")," range\nindicate success; codes in the ",(0,i.kt)("inlineCode",{parentName:"p"},"4xx")," range indicate a request that failed given\nthe information provided (e.g. a required parameter was omitted or malformed);\nand codes in the ",(0,i.kt)("inlineCode",{parentName:"p"},"5xx")," range indicate an error with StatusCake servers."),(0,i.kt)("h2",{id:"handling-errors"},"Handling Errors"),(0,i.kt)("p",null,"Errors should be handled appropriately, depending upon the value of the HTTP\nstatus code returned from the API. For example if we wanted to email a member\nof the DevOps team when an uptime check is missing from our monitoring suite we\ncould write the following script:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Alert on missing uptime check" showLineNumbers',title:'"Alert',on:!0,missing:!0,uptime:!0,'check"':!0,showLineNumbers:!0},'status_code=$(\n  curl -s https://api.statuscake.com/v1/uptime/123 \\\n    -H "Authorization: Bearer <token>" \\\n    --write-out %{http_code} \\\n    --output /dev/null\n)\n\nif [[ "$status_code" -eq 404 ]] ; then\n  echo "Uptime check (ID: 123) does not exist" | mail -s "Missing uptime check" devops@example.com\nelse\n  exit 0\nfi\n')),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"Learn how to handle input parameters and avoid some common pitfalls when\ncreating monitoring resources."))}u.isMDXComponent=!0}}]);