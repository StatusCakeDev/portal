"use strict";(self.webpackChunkportal=self.webpackChunkportal||[]).push([[844],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),c=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=c(r),d=n,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return r?a.createElement(f,s(s({ref:t},l),{},{components:r})):a.createElement(f,s({ref:t},l))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,s=new Array(i);s[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,s[1]=o;for(var c=2;c<i;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},60263:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(87462),n=(r(67294),r(3905));const i={sidebar_position:4},s="Parameters",o={unversionedId:"references/api/parameters",id:"references/api/parameters",title:"Parameters",description:"Some StatusCake API endpoints, namely those that create and update monitoring",source:"@site/guides/references/api/parameters.md",sourceDirName:"references/api",slug:"/references/api/parameters",permalink:"/guides/references/api/parameters",draft:!1,editUrl:"https://github.com/StatusCakeDev/portal/tree/master/guides/references/api/parameters.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"guides",previous:{title:"Errors",permalink:"/guides/references/api/errors"},next:{title:"SDKs",permalink:"/guides/references/sdks"}},p={},c=[{value:"Accept",id:"accept",level:2},{value:"Arrays",id:"arrays",level:2}],l={toc:c};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"parameters"},"Parameters"),(0,n.kt)("p",null,"Some StatusCake API endpoints, namely those that create and update monitoring\nresources, accept input parameters. This document outline the considerations\nthat must be made when interacting with these endpoints."),(0,n.kt)("h2",{id:"accept"},"Accept"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"Accept")," request HTTP header indicates which content types, expressed as\nMIME types, the client is able to understand. The StatusCake API is only\ncapable of consuming data that has been URL encoded, meaning that the only\nviable ",(0,n.kt)("inlineCode",{parentName:"p"},"Accept")," header be ",(0,n.kt)("inlineCode",{parentName:"p"},"application/x-www-form-urlencoded"),"."),(0,n.kt)("h2",{id:"arrays"},"Arrays"),(0,n.kt)("p",null,"Any API endpoint that accepts an array as input must be formatted as follows:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Array Syntax"',title:'"Array','Syntax"':!0},"field[]=value1&field[]=value2&...\n")),(0,n.kt)("p",null,"For example if creating an uptime check with tags, the tags must be given as\nseparate parameters."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Uptime Check with Tags" {3}',title:'"Uptime',Check:!0,with:!0,'Tags"':!0,"{3}":!0},'curl -X POST "https://api.statuscake.com/v1/uptime" \\\n  -H "Authorization: Bearer <token>" \\\n  -d "...&tags[]=testing&tags[]=sales"\n')),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Setting an array of values to be empty can be achieved either by passing a\nsingle array item without a value, i.e. ",(0,n.kt)("inlineCode",{parentName:"p"},"tags[]="),", or by specifying the field\nname without a value, i.e. ",(0,n.kt)("inlineCode",{parentName:"p"},"tags="),".")))}u.isMDXComponent=!0}}]);